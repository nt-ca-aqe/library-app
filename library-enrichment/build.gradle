buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath("se.transmode.gradle:gradle-docker:${dockerPluginVersion}")
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
        classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
        classpath("com.google.protobuf:protobuf-gradle-plugin:0.8.13")
    }
}

apply plugin: 'docker'
apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'com.google.protobuf'
apply plugin: 'idea'

compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
        languageVersion = "1.3"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
        languageVersion = "1.3"
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8",
            "org.jetbrains.kotlin:kotlin-reflect")
    implementation("org.springframework.boot:spring-boot-starter-actuator",
            "org.springframework.boot:spring-boot-starter-aop",
            "org.springframework.boot:spring-boot-starter-amqp",
            "org.springframework.boot:spring-boot-starter-security",
            "org.springframework.boot:spring-boot-starter-web")
    implementation("io.github.openfeign:feign-core:${feignVersion}",
            "io.github.openfeign:feign-jackson:${feignVersion}",
            "io.github.openfeign:feign-slf4j:${feignVersion}")
    implementation("com.fasterxml.jackson.module:jackson-module-kotlin")
    implementation("io.github.microutils:kotlin-logging:${kotlinLoggingVersion}")
    implementation("io.micrometer:micrometer-registry-prometheus")
    implementation("com.google.protobuf:protobuf-java-util:$protobufVersion")
    implementation("io.grpc:grpc-protobuf:$grpcVersion")
    implementation("io.grpc:grpc-stub:$grpcVersion")
    implementation("io.grpc:grpc-kotlin-stub:$grpcKotlinVersion")
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutinesVersion")
    runtimeOnly("io.grpc:grpc-netty-shaded:$grpcVersion")

    testImplementation("org.springframework.boot:spring-boot-starter-test")
    testImplementation("org.junit.jupiter:junit-jupiter-api",
            "org.junit.jupiter:junit-jupiter-params")
    testImplementation("io.rest-assured:rest-assured")
    testImplementation("com.tngtech.archunit:archunit:${archunitVersion}")
    testImplementation("com.github.tomakehurst:wiremock-standalone:${wiremockVersion}")
    testImplementation("com.nhaarman.mockitokotlin2:mockito-kotlin:${mockitoKotlinVersion}")
    testImplementation("info.novatec.testit:testutils-logrecorder-logback:${logRecorderVersion}")
    testImplementation("au.com.dius:pact-jvm-consumer_2.12:${pactVersion}",
            "au.com.dius:pact-jvm-consumer-junit_2.12:${pactVersion}")
    testImplementation("org.testcontainers:testcontainers:1.14.2")
    
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine",
            "org.junit.platform:junit-platform-launcher")
    // enable @ConfigurationProperties annotation processing
    // kapt("org.springframework.boot:spring-boot-configuration-processor")
    // annotationProcessor("org.springframework.boot:spring-boot-configuration-processor")
}

springBoot {
    buildInfo()
}

/**
 * Configuration of Stubs generation from the protocol buffer.
 * Default location for protocol buffers: src/main/proto
 * Idea plugin has to be enabled to recognize generated sources.
 */
protobuf {
    generatedFilesBaseDir = "$projectDir/src/generated"
    protoc {
        artifact = "com.google.protobuf:protoc:${protobufVersion}"
    }
    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}"
        }
        grpckt {
            artifact = "io.grpc:protoc-gen-grpc-kotlin:${grpcKotlinVersion}"
        }
    }
    generateProtoTasks {
        ofSourceSet('main')*.plugins {
            grpc {}
            grpckt {}
        }
    }
}

/**
 * Makes sure that the generated gRPC sources are cleaned.
 */
clean {
    delete protobuf.generatedFilesBaseDir
}

task unitTest(type: Test) {
    useJUnitPlatform() { includeTags 'unit-test' }
    testLogging { events "skipped", "failed" }
}

task integrationTest(type: Test) {
    dependsOn unitTest
    useJUnitPlatform() { includeTags 'integration-test' }
    testLogging { events "skipped", "failed" }
}

task acceptanceTest(type: Test) {
    dependsOn integrationTest
    useJUnitPlatform() { includeTags 'acceptance-test' }
    testLogging { events "skipped", "failed" }
}

task aggregateTestReports(type: TestReport) {
    destinationDir = test.reports.html.destination
    reportOn unitTest, integrationTest, acceptanceTest
}

task buildDocker(type: Docker, dependsOn: build) {
    push = false
    tag = 'caaqe/library-enrichment'

    baseImage = 'openjdk:8-jre-alpine'
    volume("/tmp")
    addFile {
        from jar
        rename { 'app.jar' }
    }
    entryPoint(['java', '-Djava.security.egd=file:/dev/./urandom', '-jar', '/app.jar'])
}

tasks.check.dependsOn.remove(test)
tasks.check.dependsOn acceptanceTest
