buildscript {
    ext {
        snippetsDir = file('build/generated-snippets')
    }
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
        classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
        classpath("se.transmode.gradle:gradle-docker:${dockerPluginVersion}")
        classpath("org.asciidoctor:asciidoctor-gradle-plugin:${asciidoctorVersion}")
        classpath("com.google.protobuf:protobuf-gradle-plugin:0.8.13")
    }
}

apply plugin: 'docker'
apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'org.asciidoctor.convert'
apply plugin: 'com.google.protobuf'

sourceCompatibility = 1.8
compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
        languageVersion = "1.3"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
        languageVersion = "1.3"
    }
}

springBoot {
    buildInfo()
}

repositories {
    mavenCentral()
}

dependencies {
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}")
    implementation("org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}")
    implementation("org.springframework.boot:spring-boot-starter-actuator")
    implementation("org.springframework.boot:spring-boot-starter-aop")
    implementation("org.springframework.boot:spring-boot-starter-amqp")
    implementation("org.springframework.boot:spring-boot-starter-data-mongodb")
    implementation("org.springframework.boot:spring-boot-starter-hateoas")
    implementation("org.springframework.boot:spring-boot-starter-security")
    implementation("org.springframework.boot:spring-boot-starter-web")
    implementation("org.springframework.boot:spring-boot-starter-validation")
    implementation("com.fasterxml.jackson.module:jackson-module-kotlin")
    implementation("io.micrometer:micrometer-registry-prometheus")

    implementation("com.google.protobuf:protobuf-java-util:${protobufVersion}")
    implementation("io.grpc:grpc-protobuf:${grpcVersion}")
    implementation("io.grpc:grpc-stub:${grpcVersion}")
    implementation("io.grpc:grpc-kotlin-stub:${grpcKotlinVersion}")
    runtimeOnly("io.grpc:grpc-netty-shaded:${grpcVersion}")

    asciidoctor("org.springframework.restdocs:spring-restdocs-asciidoctor")

    testImplementation("org.springframework.boot:spring-boot-starter-test")
    testImplementation("org.springframework.restdocs:spring-restdocs-mockmvc")
    testImplementation("org.springframework.security:spring-security-test")
    testImplementation("org.junit.jupiter:junit-jupiter-api")
    testImplementation("org.junit.jupiter:junit-jupiter-params")
    testImplementation("io.rest-assured:rest-assured")
    testImplementation("com.tngtech.archunit:archunit:${archunitVersion}")
    testImplementation("io.mockk:mockk:${mockkVersion}")
    testImplementation("info.novatec.testit:testutils-logrecorder-logback:${logRecorderVersion}")
    testImplementation("org.testcontainers:testcontainers:${testContainersVersion}")
    testImplementation("au.com.dius:pact-jvm-provider-junit5:${pactVersion}")

    testRuntimeOnly("org.junit.platform:junit-platform-launcher")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine")
}

task unitTest(type: Test) {
    useJUnitPlatform() { includeTags 'unit-test' }
    testLogging { events "skipped", "failed" }
}

task integrationTest(type: Test) {
    dependsOn unitTest
    useJUnitPlatform() { includeTags 'integration-test' }
    testLogging { events "skipped", "failed" }
}

task acceptanceTest(type: Test) {
    dependsOn integrationTest
    useJUnitPlatform() { includeTags 'acceptance-test' }
    testLogging { events "skipped", "failed" }
}

task contractTest(type: Test) {
    dependsOn acceptanceTest
    useJUnitPlatform() { includeTags 'contract-test' }
    testLogging { events "skipped", "failed" }
}

task aggregateTestReports(type: TestReport) {
    destinationDir = test.reports.html.destination
    reportOn unitTest, integrationTest, acceptanceTest, contractTest
}

/**
 * Configuration of Stubs generation from the protocol buffer.
 * Default location for protocol buffers: src/main/proto
 */
protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:${protobufVersion}"
    }
    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}"
        }
        grpckt {
            artifact = "io.grpc:protoc-gen-grpc-kotlin:${grpcKotlinVersion}"
        }
    }
    generateProtoTasks {
        ofSourceSet('main')*.plugins {
            grpc {}
            grpckt {}
        }
    }
}

asciidoctor {
    dependsOn acceptanceTest
    setOptions([
            'doctype': 'book',
            'backend': 'html5'
    ])
    setAttributes([
            'snippets'          : snippetsDir,
            'source-highlighter': 'coderay',
            'toc'               : 'left',
            'toclevels'         : '3',
            'sectlinks'         : 'true'
    ])
}

bootJar {
    dependsOn asciidoctor
    from("${asciidoctor.outputDir}/html5") {
        into 'BOOT-INF/classes/static/docs'
    }
}

task buildDocker(type: Docker, dependsOn: build) {
    push = false
    tag = 'caaqe/library-service'

    baseImage = 'openjdk:8-jre-alpine'
    volume("/tmp")
    addFile {
        from jar
        rename { 'app.jar' }
    }
    entryPoint(['java', '-Djava.security.egd=file:/dev/./urandom', '-jar', '/app.jar'])
}

tasks.check.dependsOn.remove(test)
tasks.check.dependsOn contractTest
